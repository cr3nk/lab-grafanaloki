version: "3.5"

networks:
  loki:

services:

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    user: "0:0"
    environment:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      -  GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      -  GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
    - ./ds_store/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    - ./ds_store/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
    - ./ds_store/grafana/dashboards:/var/lib/grafana/dashboards:ro 
    ports:
    - "3000:3000"
    restart: unless-stopped
    networks:
      - loki

  loki:
   image: grafana/loki:latest
   container_name: loki
   user: "0:0"
   volumes: 
     - /etc/localtime:/etc/localtime:ro
     - /etc/timezone:/etc/timezone:ro
     - ./config/config.yaml:/config/config.yaml
     - ./loki/loki-data:/tmp/loki
     - ./loki/loki-wal:/tmp/wal
   entrypoint:
     - /usr/bin/loki
     - config.file=./config/config.yaml
   ports:
     - "3100:3100"
   restart: unless-stopped
   networks:
     - loki

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    user: "0:0"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /var/log/auth.log:/var/log/auth.log
      - /var/log:/var/log
      - ./config/promtail-config.yml:/etc/config/promtail-config.yml
    entrypoint:
      - /usr/bin/promtail
      - -config.file=/etc/config/promtail-config.yml
    ports:
      - "9080:9080"
    restart: unless-stopped
    networks:
      - loki 

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - loki
  
  syslog-ng:
    image: balabit/syslog-ng:latest
    container_name: syslog-ng
    command: -edv
    volumes:
      - ./config/syslog-ng.conf:/etc/syslog-ng/syslog-ng.conf:ro
    ports: ["1514:1514/udp", "6011:6011/tcp"]
    restart: unless-stopped
    networks:
      - loki


  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - "./config:/config"
      - ./alertmanager:/data
    command: --config.file=/config/alertmanager.yml --log.level=debug  
    networks:
      - loki


  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
#      - '--collector.filesystem.ignored-fs-types="^(sys|proc|auto|cgroup|devpts|ns|au|fuse\.lxc|mqueue)(fs|)$$"'
    ports:
      - "9100:9100"
    restart: unless-stopped  
    networks:
      - loki  

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    ports:
      - '8086:8086'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./influxdb-storage:/var/lib/influxdb2:rw
    environment:
      - ./env/fluxdb.ini:/etc/fluxdb.ini
    restart: unless-stopped   
    networks:
      - loki
#  reporter:
#    image: registry.gitlab.com/irtec/grafana-report:1.1.0
#    container_name: report
#    command: -ip=10.22.12.4:3000
#    volumes:
#      - /etc/localtime:/etc/localtime:ro
#      - /etc/timezone:/etc/timezone:ro
#    restart: unless-stopped

#  renderer:
#    image: grafana/grafana-image-renderer:latest
#    container_name: render
#    volumes:
#      - /etc/localtime:/etc/localtime:ro
#      - /etc/timezone:/etc/timezone:ro
#    restart: unless-stopped
 
  cadvisor:
    image: gcr.io/google-containers/cadvisor:v0.36.0
    container_name: cadvisor
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - loki
  jaeger:
    image: jaegertracing/all-in-one:1.30.0
    container_name: jaegertracing
    user: "0:0"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./jaeger:/badger
    mem_limit: 512m
    environment:
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_KEY=/badger/key
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_SPAN_STORE_TTL=168h0m0s
    ports: ["6831:6831/udp", "6832:6832/udp", "14250:14250", "14269:14269", "16686:16686"]
    restart: unless-stopped  
    networks:
      - loki
  #opentelemetry-collector:
  #  image: otel/opentelemetry-collector:0.58.0
  #  container_name: otel
  #  command: --config=/conf/otel-collector.yaml
  #  volumes:
  #    - /etc/localtime:/etc/localtime:ro
  #    - /etc/timezone:/etc/timezone:ro
  #    - ./config/otel-collector.yaml:/conf/otel-collector.yaml
  #  ports: ["9464:9464", "55680:55680", "55681:55681"] 
  #  restart: unless-stopped